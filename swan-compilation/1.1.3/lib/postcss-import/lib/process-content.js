/* eslint-disable */
"use strict";

// builtin tooling

var path = require("path");

// external tooling
var postcss = require("postcss");

// placeholder tooling
var sugarss = void 0;

module.exports = function processContent(result, content, filename, options) {
  var plugins = options.plugins;
  var ext = path.extname(filename);

  var parserList = [];

  // SugarSS support:
  if (ext === ".sss") {
    if (!sugarss) {
      try {
        sugarss = require("sugarss");
      } catch (e) {
        // Ignore
      }
    }
    if (sugarss) return runPostcss(content, filename, plugins, [sugarss]);
  }

  // Syntax support:
  if (result.opts.syntax && result.opts.syntax.parse) {
    parserList.push(result.opts.syntax.parse);
  }

  // Parser support:
  if (result.opts.parser) parserList.push(result.opts.parser);
  // Try the default as a last resort:
  parserList.push(null);

  return runPostcss(content, filename, plugins, parserList);
};

function runPostcss(content, filename, plugins, parsers, index) {
  if (!index) index = 0;
  return postcss(plugins).process(content, {
    from: filename,
    parser: parsers[index]
  }).catch(function (err) {
    // If there's an error, try the next parser
    index++;
    // If there are no parsers left, throw it
    if (index === parsers.length) throw err;
    return runPostcss(content, filename, plugins, parsers, index);
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wb3N0Y3NzLWltcG9ydC9saWIvcHJvY2Vzcy1jb250ZW50LmpzIl0sIm5hbWVzIjpbInBhdGgiLCJyZXF1aXJlIiwicG9zdGNzcyIsInN1Z2Fyc3MiLCJtb2R1bGUiLCJleHBvcnRzIiwicHJvY2Vzc0NvbnRlbnQiLCJyZXN1bHQiLCJjb250ZW50IiwiZmlsZW5hbWUiLCJvcHRpb25zIiwicGx1Z2lucyIsImV4dCIsImV4dG5hbWUiLCJwYXJzZXJMaXN0IiwiZSIsInJ1blBvc3Rjc3MiLCJvcHRzIiwic3ludGF4IiwicGFyc2UiLCJwdXNoIiwicGFyc2VyIiwicGFyc2VycyIsImluZGV4IiwicHJvY2VzcyIsImZyb20iLCJjYXRjaCIsImxlbmd0aCIsImVyciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFFQTs7QUFDQSxJQUFNQSxPQUFPQyxRQUFRLE1BQVIsQ0FBYjs7QUFFQTtBQUNBLElBQU1DLFVBQVVELFFBQVEsU0FBUixDQUFoQjs7QUFFQTtBQUNBLElBQUlFLGdCQUFKOztBQUVBQyxPQUFPQyxPQUFQLEdBQWlCLFNBQVNDLGNBQVQsQ0FBd0JDLE1BQXhCLEVBQWdDQyxPQUFoQyxFQUF5Q0MsUUFBekMsRUFBbURDLE9BQW5ELEVBQTREO0FBQzNFLE1BQU1DLFVBQVVELFFBQVFDLE9BQXhCO0FBQ0EsTUFBTUMsTUFBTVosS0FBS2EsT0FBTCxDQUFhSixRQUFiLENBQVo7O0FBRUEsTUFBTUssYUFBYSxFQUFuQjs7QUFFQTtBQUNBLE1BQUlGLFFBQVEsTUFBWixFQUFvQjtBQUNsQixRQUFJLENBQUNULE9BQUwsRUFBYztBQUNaLFVBQUk7QUFDRkEsa0JBQVVGLFFBQVEsU0FBUixDQUFWO0FBQ0QsT0FGRCxDQUVFLE9BQU9jLENBQVAsRUFBVTtBQUNWO0FBQ0Q7QUFDRjtBQUNELFFBQUlaLE9BQUosRUFBYSxPQUFPYSxXQUFXUixPQUFYLEVBQW9CQyxRQUFwQixFQUE4QkUsT0FBOUIsRUFBdUMsQ0FBQ1IsT0FBRCxDQUF2QyxDQUFQO0FBQ2Q7O0FBRUQ7QUFDQSxNQUFJSSxPQUFPVSxJQUFQLENBQVlDLE1BQVosSUFBc0JYLE9BQU9VLElBQVAsQ0FBWUMsTUFBWixDQUFtQkMsS0FBN0MsRUFBb0Q7QUFDbERMLGVBQVdNLElBQVgsQ0FBZ0JiLE9BQU9VLElBQVAsQ0FBWUMsTUFBWixDQUFtQkMsS0FBbkM7QUFDRDs7QUFFRDtBQUNBLE1BQUlaLE9BQU9VLElBQVAsQ0FBWUksTUFBaEIsRUFBd0JQLFdBQVdNLElBQVgsQ0FBZ0JiLE9BQU9VLElBQVAsQ0FBWUksTUFBNUI7QUFDeEI7QUFDQVAsYUFBV00sSUFBWCxDQUFnQixJQUFoQjs7QUFFQSxTQUFPSixXQUFXUixPQUFYLEVBQW9CQyxRQUFwQixFQUE4QkUsT0FBOUIsRUFBdUNHLFVBQXZDLENBQVA7QUFDRCxDQTdCRDs7QUErQkEsU0FBU0UsVUFBVCxDQUFvQlIsT0FBcEIsRUFBNkJDLFFBQTdCLEVBQXVDRSxPQUF2QyxFQUFnRFcsT0FBaEQsRUFBeURDLEtBQXpELEVBQWdFO0FBQzlELE1BQUksQ0FBQ0EsS0FBTCxFQUFZQSxRQUFRLENBQVI7QUFDWixTQUFPckIsUUFBUVMsT0FBUixFQUNKYSxPQURJLENBQ0loQixPQURKLEVBQ2E7QUFDaEJpQixVQUFNaEIsUUFEVTtBQUVoQlksWUFBUUMsUUFBUUMsS0FBUjtBQUZRLEdBRGIsRUFLSkcsS0FMSSxDQUtFLGVBQU87QUFDWjtBQUNBSDtBQUNBO0FBQ0EsUUFBSUEsVUFBVUQsUUFBUUssTUFBdEIsRUFBOEIsTUFBTUMsR0FBTjtBQUM5QixXQUFPWixXQUFXUixPQUFYLEVBQW9CQyxRQUFwQixFQUE4QkUsT0FBOUIsRUFBdUNXLE9BQXZDLEVBQWdEQyxLQUFoRCxDQUFQO0FBQ0QsR0FYSSxDQUFQO0FBWUQiLCJmaWxlIjoicHJvY2Vzcy1jb250ZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyogZXNsaW50LWRpc2FibGUgKi9cblwidXNlIHN0cmljdFwiXG5cbi8vIGJ1aWx0aW4gdG9vbGluZ1xuY29uc3QgcGF0aCA9IHJlcXVpcmUoXCJwYXRoXCIpXG5cbi8vIGV4dGVybmFsIHRvb2xpbmdcbmNvbnN0IHBvc3Rjc3MgPSByZXF1aXJlKFwicG9zdGNzc1wiKVxuXG4vLyBwbGFjZWhvbGRlciB0b29saW5nXG5sZXQgc3VnYXJzc1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHByb2Nlc3NDb250ZW50KHJlc3VsdCwgY29udGVudCwgZmlsZW5hbWUsIG9wdGlvbnMpIHtcbiAgY29uc3QgcGx1Z2lucyA9IG9wdGlvbnMucGx1Z2luc1xuICBjb25zdCBleHQgPSBwYXRoLmV4dG5hbWUoZmlsZW5hbWUpXG5cbiAgY29uc3QgcGFyc2VyTGlzdCA9IFtdXG5cbiAgLy8gU3VnYXJTUyBzdXBwb3J0OlxuICBpZiAoZXh0ID09PSBcIi5zc3NcIikge1xuICAgIGlmICghc3VnYXJzcykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgc3VnYXJzcyA9IHJlcXVpcmUoXCJzdWdhcnNzXCIpXG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIElnbm9yZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoc3VnYXJzcykgcmV0dXJuIHJ1blBvc3Rjc3MoY29udGVudCwgZmlsZW5hbWUsIHBsdWdpbnMsIFtzdWdhcnNzXSlcbiAgfVxuXG4gIC8vIFN5bnRheCBzdXBwb3J0OlxuICBpZiAocmVzdWx0Lm9wdHMuc3ludGF4ICYmIHJlc3VsdC5vcHRzLnN5bnRheC5wYXJzZSkge1xuICAgIHBhcnNlckxpc3QucHVzaChyZXN1bHQub3B0cy5zeW50YXgucGFyc2UpXG4gIH1cblxuICAvLyBQYXJzZXIgc3VwcG9ydDpcbiAgaWYgKHJlc3VsdC5vcHRzLnBhcnNlcikgcGFyc2VyTGlzdC5wdXNoKHJlc3VsdC5vcHRzLnBhcnNlcilcbiAgLy8gVHJ5IHRoZSBkZWZhdWx0IGFzIGEgbGFzdCByZXNvcnQ6XG4gIHBhcnNlckxpc3QucHVzaChudWxsKVxuXG4gIHJldHVybiBydW5Qb3N0Y3NzKGNvbnRlbnQsIGZpbGVuYW1lLCBwbHVnaW5zLCBwYXJzZXJMaXN0KVxufVxuXG5mdW5jdGlvbiBydW5Qb3N0Y3NzKGNvbnRlbnQsIGZpbGVuYW1lLCBwbHVnaW5zLCBwYXJzZXJzLCBpbmRleCkge1xuICBpZiAoIWluZGV4KSBpbmRleCA9IDBcbiAgcmV0dXJuIHBvc3Rjc3MocGx1Z2lucylcbiAgICAucHJvY2Vzcyhjb250ZW50LCB7XG4gICAgICBmcm9tOiBmaWxlbmFtZSxcbiAgICAgIHBhcnNlcjogcGFyc2Vyc1tpbmRleF0sXG4gICAgfSlcbiAgICAuY2F0Y2goZXJyID0+IHtcbiAgICAgIC8vIElmIHRoZXJlJ3MgYW4gZXJyb3IsIHRyeSB0aGUgbmV4dCBwYXJzZXJcbiAgICAgIGluZGV4KytcbiAgICAgIC8vIElmIHRoZXJlIGFyZSBubyBwYXJzZXJzIGxlZnQsIHRocm93IGl0XG4gICAgICBpZiAoaW5kZXggPT09IHBhcnNlcnMubGVuZ3RoKSB0aHJvdyBlcnJcbiAgICAgIHJldHVybiBydW5Qb3N0Y3NzKGNvbnRlbnQsIGZpbGVuYW1lLCBwbHVnaW5zLCBwYXJzZXJzLCBpbmRleClcbiAgICB9KVxufSJdfQ==