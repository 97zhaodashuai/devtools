'use strict';

var _util = require('./util');

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _watch = require('watch');

var _watch2 = _interopRequireDefault(_watch);

var _frameworkFlow = require('./framework-flow');

var _frameworkFlow2 = _interopRequireDefault(_frameworkFlow);

var _index = require('./index');

var _index2 = _interopRequireDefault(_index);

var _log = require('./log');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _global$SWAN_CLI_ARGV = global.SWAN_CLI_ARGV,
    OUTPUT = _global$SWAN_CLI_ARGV.OUTPUT,
    WORK_PATH = _global$SWAN_CLI_ARGV.WORK_PATH,
    SWAN_CORE_PATH = _global$SWAN_CLI_ARGV.SWAN_CORE_PATH,
    SOURCEMAP = _global$SWAN_CLI_ARGV.SOURCEMAP,
    UGLIFY = _global$SWAN_CLI_ARGV.UGLIFY,
    COMPILED_CORE_PATH = _global$SWAN_CLI_ARGV.COMPILED_CORE_PATH,
    COMPILE_SUBPACKAGE = _global$SWAN_CLI_ARGV.COMPILE_SUBPACKAGE,
    USE_OLD_HTML = _global$SWAN_CLI_ARGV.USE_OLD_HTML,
    SWAN_CLI_PROCESS = _global$SWAN_CLI_ARGV.SWAN_CLI_PROCESS,
    SAN_DEV_HOOK = _global$SWAN_CLI_ARGV.SAN_DEV_HOOK,
    COMMAND = _global$SWAN_CLI_ARGV.COMMAND; /**
                                              * @file 根据开发者app.json配置生成slave的html
                                              * @author zhuxin04
                                              */

OUTPUT = OUTPUT || (0, _util.pathResolve)(__dirname, './tests/output');
SWAN_CORE_PATH = SWAN_CORE_PATH || '';
var BASE_PATH = (0, _util.formatPath)((0, _util.pathJoin)(__dirname, '../'));
global.SWAN_CLI_ARGV.BASE_PATH = BASE_PATH;
WORK_PATH = (0, _util.formatPath)((0, _util.isAbsolutePath)(WORK_PATH) ? WORK_PATH : (0, _util.pathJoin)(SWAN_CLI_PROCESS.cwd(), WORK_PATH));
OUTPUT = (0, _util.formatPath)((0, _util.isAbsolutePath)(OUTPUT) ? OUTPUT : (0, _util.pathJoin)(SWAN_CLI_PROCESS.cwd(), OUTPUT));
SWAN_CORE_PATH = (0, _util.formatPath)((0, _util.isAbsolutePath)(SWAN_CORE_PATH) ? SWAN_CORE_PATH : (0, _util.pathJoin)(BASE_PATH, '/node_modules/@super-fe/swan-core'));
var defaultOptions = {
    sourcemaps: SOURCEMAP || 'inline',
    uglify: UGLIFY || false,
    subPackage: COMPILE_SUBPACKAGE,
    useOldPackHtml: USE_OLD_HTML,
    sanDevHook: SAN_DEV_HOOK,
    log: {
        log: function log(text) {
            console.log(text);
        },
        warn: function warn(text) {
            console.warn(text);
        }
    }
};
var appConfig = (0, _util.getAppConfig)(WORK_PATH);
var errorFn = function errorFn(e) {
    console.log(e);
};
var ignoreDir = new RegExp('' + OUTPUT);
var watchOptions = {
    ignoreDotFiles: true,
    ignoreDirectoryPattern: ignoreDir,
    interval: 0
};

function userCodeRemoteDeploy() {
    var deployPath = _fs2.default.readFileSync('mydev', 'utf-8');
    deployPath = /\s*deployPath\s*=(.*)/g.exec(deployPath)[1];
    var defaultDeployPath = deployPath.replace(/(^\s*)|(\s*$)/g, '') + '/';
    (0, _index2.default)(appConfig, BASE_PATH, WORK_PATH, defaultDeployPath, SWAN_CORE_PATH, false, defaultOptions, errorFn);
}

function removeOldOutput(path) {
    var files = [];
    if (_fs2.default.existsSync(path)) {
        files = _fs2.default.readdirSync(path);
        files.forEach(function (file, index) {
            var curPath = (0, _util.pathJoin)(path, file);
            if (_fs2.default.statSync(curPath).isDirectory()) {
                removeOldOutput(curPath);
            } else {
                _fs2.default.unlinkSync(curPath);
            }
        });
        _fs2.default.rmdirSync(path);
    }
}

function resetLogEvent() {
    Object.keys(_log.finishObj).forEach(function (key) {
        _log.finishObj[key] = 0;
    });
    Object.keys(_log.recordObj['developer']).forEach(function (key) {
        _log.recordObj['developer'][key] = 0;
    });
    Object.keys(_log.processionObj).forEach(function (key) {
        _log.processionObj[key] = false;
    });
}

if (!COMMAND.length) {
    removeOldOutput(OUTPUT);
    var options = Object.assign({}, defaultOptions, {
        htmlReplaceVariables: {}
    });
    if (COMPILED_CORE_PATH) {
        options.htmlReplaceVariables['{#swanCorePath#}'] = COMPILED_CORE_PATH;
    }
    if (SAN_DEV_HOOK) {
        Object.assign(options.htmlReplaceVariables, {
            '<!-- swan master hook -->': '<script type="text/javascript" src="../swan-devhook/master.js"></script>',
            '<!-- swan slave hook -->': '<script type="text/javascript" src="../swan-devhook/slave.js"></script>'
        });
    }
    (0, _index2.default)(appConfig, BASE_PATH, WORK_PATH, OUTPUT, SWAN_CORE_PATH, true, options, errorFn);
} else if (COMMAND.indexOf('watch') !== -1) {
    removeOldOutput(OUTPUT);
    var _ignoreDir = new RegExp('' + OUTPUT);
    _watch2.default.watchTree(WORK_PATH, watchOptions, function (modFile, curr, prev) {
        resetLogEvent();
        (0, _index2.default)(appConfig, BASE_PATH, WORK_PATH, OUTPUT, SWAN_CORE_PATH, true, defaultOptions, errorFn);
    });
} else if (COMMAND.indexOf('watchremote') !== -1) {
    var _ignoreDir2 = new RegExp('' + OUTPUT);
    _watch2.default.watchTree(WORK_PATH, watchOptions, function (modFile, curr, prev) {
        userCodeRemoteDeploy();
    });
} else if (COMMAND.indexOf('userCodeRemoteDeploy') !== -1) {
    userCodeRemoteDeploy();
} else if (COMMAND.indexOf('compileUserCode') !== -1) {
    (0, _index2.default)(appConfig, BASE_PATH, WORK_PATH, OUTPUT, SWAN_CORE_PATH, false, defaultOptions, errorFn);
} else if (COMMAND.indexOf('oldPack') !== -1) {
    var corePath = _fs2.default.readFileSync('mydev', 'utf-8');
    corePath = /\s*corePath\s*=(.*)/g.exec(corePath)[1];
    var swanCorePath = corePath.replace(/(^\s*)|(\s*$)/g, '') + '/';
    var _options = Object.assign({}, defaultOptions, {
        htmlReplaceVariables: {
            '{#swanCorePath#}': swanCorePath
        }
    });
    (0, _index2.default)(appConfig, BASE_PATH, WORK_PATH, OUTPUT, SWAN_CORE_PATH, true, _options, errorFn);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,